# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Ailment {
  id: ID!
  name: String!
}

type AilmentInfo {
  cure: Cure!
  description: String!
  id: ID!
  name: String!
}

type Camp {
  name: String!
  zone: Int!
}

type Condition {
  chance: Int!
  quantity: Int!
  rank: String!
  subtype: String
  type: String!
}

type Cure {
  action: RecoveryActionType
  items: [Item!]!
  protections: [Skill!]!
}

type Decoration {
  id: ID!
  name: String!
  rarity: Int!
  skills: [SkillRank!]!
  slot: Int!
}

type Element {
  id: ID!
  name: String!
}

type ElementInfo {
  id: ID!

  """Monsters who use the element"""
  monsters: [Monster!]!
  name: String!
}

type Item {
  id: ID!
  name: String!
}

type ItemInfo {
  carryLimit: Int!
  description: String!
  id: ID!
  name: String!
  rarity: Int!
  value: Int!
}

type Location {
  id: ID!
  name: String!
}

type LocationInfo {
  camps: [Camp!]!
  id: ID!
  name: String!
  zoneCount: Int!
}

"""
The Modifier scalar is a JsonObject that describes the stat modifiers granted by a skill rank
"""
scalar Modifier

type Monster {
  id: ID!
  name: String!
}

type MonsterInfo {
  ailments: [Ailment!]!
  description: String!
  elements: [Element!]!
  id: ID!
  locations: [Location!]!
  name: String!
  resistances: [Resistance!]!
  rewards: [Reward!]!
  species: String!
  type: String!
  weaknesses: [Weakness!]!
}

type Query {
  """Find one ailment by id or name.If both is given, id will be used."""
  ailment(id: ID, name: String): AilmentInfo
  ailments(after: ID, before: ID, limit: Int = 25, name: String): [AilmentInfo!]!

  """Find one decoration by id or name.If both is given, id will be used."""
  decoration(id: ID, name: String): Decoration
  decorations(after: ID, before: ID, limit: Int = 25, name: String): [Decoration!]!

  """Find one element by id or name.If both is given, id will be used."""
  element(id: ID, name: String): ElementInfo
  elements(after: ID, before: ID, limit: Int = 25, name: String): [ElementInfo!]!

  """Find one item by id or name.If both is given, id will be used."""
  item(id: ID, name: String): ItemInfo
  items(after: ID, before: ID, limit: Int = 25, name: String): [ItemInfo!]!

  """Find one location by id or name.If both is given, id will be used."""
  location(id: ID, name: String): LocationInfo
  locations(after: ID, before: ID, limit: Int = 25, name: String): [LocationInfo!]!

  """Find one monster by id or name.If both is given, id will be used."""
  monster(id: ID, name: String): MonsterInfo
  monsters(after: ID, before: ID, limit: Int = 25, name: String): [MonsterInfo!]!

  """Find one skill by id or name.If both is given, id will be used."""
  skill(id: ID, name: String): SkillInfo
  skills(after: ID, before: ID, limit: Int = 25, name: String): [SkillInfo!]!
}

"""The action needed to be performed to remove ailment."""
enum RecoveryActionType {
  Crouch
  Dodge
}

type Resistance {
  condition: String
  element: String!
}

type Reward {
  conditions: [Condition!]!
  item: Item!
}

type Skill {
  id: ID!
  name: String!
}

type SkillInfo {
  description: String!
  id: ID!
  name: String!
  ranks: [SkillRankInfo!]!
}

type SkillRank {
  level: Int!
  skillId: ID!
  skillName: String!
}

type SkillRankInfo {
  description: String!
  level: Int!
  modifiers: Modifier
  skillId: ID!
  skillName: String!
}

type Weakness {
  condition: String
  element: String!
  stars: Int!
}
