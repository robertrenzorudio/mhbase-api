# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Ailment implements BaseType {
  cure: Cure!
  description: String!
  id: ID!
  name: String!
}

type AilmentConnection {
  edges: [AilmentEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type AilmentEdge {
  cursor: String!
  node: Ailment!
}

interface BaseType {
  id: ID!
}

type Camp {
  name: String!
  zone: Int!
}

type Condition {
  chance: Int!
  quantity: Int!
  rank: String!
  subtype: String
  type: String!
}

type Cure {
  action: RecoveryActionType
  items: [Item!]!
  protections: [Skill!]!
}

type Decoration implements BaseType {
  id: ID!
  name: String!
  rarity: Int!
  skills: [SkillRank!]!
  slot: Int!
}

type DecorationConnection {
  edges: [DecorationEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type DecorationEdge {
  cursor: String!
  node: Decoration!
}

type Element implements BaseType {
  id: ID!

  """Monsters who use the element"""
  monsters: [Monster!]!
  name: String!
}

type ElementConnection {
  edges: [ElementEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ElementEdge {
  cursor: String!
  node: Element!
}

type Item implements BaseType {
  carryLimit: Int!
  description: String!
  id: ID!
  name: String!
  rarity: Int!
  value: Int!
}

type ItemConnection {
  edges: [ItemEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ItemEdge {
  cursor: String!
  node: Item!
}

type Location implements BaseType {
  camps: [Camp!]!
  id: ID!
  name: String!
  zoneCount: Int!
}

type LocationConnection {
  edges: [LocationEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type LocationEdge {
  cursor: String!
  node: Location!
}

"""
The Modifier scalar is a JsonObject that describes the stat modifiers granted by a skill rank
"""
scalar Modifier

type Monster implements BaseType {
  ailments: [Ailment!]!
  description: String!
  elements: [Element!]!
  id: ID!
  locations: [Location!]!
  name: String!
  resistances: [Resistance!]!
  rewards: [Reward!]!
  species: String!
  type: String!
  weaknesses: [Weakness!]!
}

type MonsterConnection {
  edges: [MonsterEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type MonsterEdge {
  cursor: String!
  node: Monster!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Query {
  """Find one ailment by id or name.If both is given, id will be used."""
  ailment(id: ID, name: String): Ailment
  ailments(after: String, before: String, first: Int, last: Int): AilmentConnection!

  """Find one decoration by id or name.If both is given, id will be used."""
  decoration(id: ID, name: String): Decoration
  decorations(after: String, before: String, first: Int, last: Int): DecorationConnection!

  """Find one element by id or name.If both is given, id will be used."""
  element(id: ID, name: String): Element
  elements(after: String, before: String, first: Int, last: Int): ElementConnection!

  """Find one item by id or name.If both is given, id will be used."""
  item(id: ID, name: String): Item
  items(after: String, before: String, first: Int, last: Int): ItemConnection!

  """Find one location by id or name.If both is given, id will be used."""
  location(id: ID, name: String): Location
  locations(after: String, before: String, first: Int, last: Int): LocationConnection!

  """Find one monster by id or name.If both is given, id will be used."""
  monster(id: ID, name: String): Monster
  monsters(after: String, before: String, first: Int, last: Int): MonsterConnection!

  """Find one skill by id or name.If both is given, id will be used."""
  skill(id: ID, name: String): Skill
  skills(after: String, before: String, first: Int, last: Int): SkillConnection!
}

"""The action needed to be performed to remove ailment."""
enum RecoveryActionType {
  Crouch
  Dodge
}

type Resistance {
  condition: String
  element: String!
}

type Reward {
  conditions: [Condition!]!
  item: Item!
}

type Skill implements BaseType {
  description: String!
  id: ID!
  name: String!
  ranks: [SkillRank!]!
}

type SkillConnection {
  edges: [SkillEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type SkillEdge {
  cursor: String!
  node: Skill!
}

type SkillRank {
  description: String!
  level: Int!
  modifiers: Modifier
  skillId: ID!
  skillName: String!
}

type Weakness {
  condition: String
  element: String!
  stars: Int!
}
