// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Ailment {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(40)
  description String    @db.VarChar(255)
  cure        Cure?
  monsters    Monster[]
}

model Camp {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(40)
  zone       Int
  location   Location @relation(fields: [locationId], references: [id])
  locationId Int
}

model Cure {
  id          Int             @id @default(autoincrement())
  action      RecoveryAction?
  items       Item[]
  protections Skill[]
  ailment     Ailment         @relation(fields: [ailmentId], references: [id])
  ailmentId   Int
}

model Decoration {
  id     Int         @id @default(autoincrement())
  name   String      @unique @db.VarChar(40)
  rarity Int
  slot   Int
  skills SkillRank[]
}

model Element {
  id      Int         @id @default(autoincrement())
  name    ElementType
  monster Monster[]
}

model Item {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(40)
  description String   @db.VarChar(255)
  rarity      Int
  carryLimit  Int
  value       Int
  cures       Cure[]
  rewards     Reward[]
}

model Location {
  id        Int       @id @default(autoincrement())
  name      String    @unique @db.VarChar(40)
  zoneCount Int
  camps     Camp[]
  monsters  Monster[]
}

model Monster {
  id          Int        @id @default(autoincrement())
  name        String     @unique @db.VarChar(40)
  type        String     @db.VarChar(6)
  species     String     @db.VarChar(15)
  description String     @db.VarChar(400)
  elements    Element[]
  ailments    Ailment[]
  locations   Location[]
  resistances Json
  weaknesses  Json
  rewards     Reward[]
}

model Reward {
  id         Int     @id @default(autoincrement())
  conditions Json
  item       Item    @relation(fields: [itemId], references: [id])
  itemId     Int
  monster    Monster @relation(fields: [monsterId], references: [id])
  monsterId  Int
}

model Skill {
  id          Int         @id @default(autoincrement())
  name        String      @unique @db.VarChar(40)
  description String      @db.VarChar(255)
  ranks       SkillRank[]
  cures       Cure[]
}

model SkillRank {
  id          Int          @id @default(autoincrement())
  level       Int
  description String       @db.VarChar(255)
  modifiers   Json?
  skillName   String       @db.VarChar(40)
  Skill       Skill        @relation(fields: [skillId], references: [id])
  skillId     Int
  decorations Decoration[]
}

enum ElementType {
  fire
  water
  ice
  thunder
  dragon
  blast
  poison
  sleep
  paralysis
  stun
}

enum RecoveryAction {
  Dodge
  Crouch
}
